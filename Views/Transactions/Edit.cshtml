@model SkillsAssessment.Models.Transaction

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_TraqLayout.cshtml";
}

<html>
<body>
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>Transaction</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Code)

            <div class="form-group">
                @Html.LabelFor(model => model.AccountCode, "Account Code", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("AccountCode", null, htmlAttributes: new { @class = "form-control",@readonly="readonly" })
                    @Html.ValidationMessageFor(model => model.AccountCode, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.TransactionDate, htmlAttributes: new { @class = "control-label col-md-2 required-field" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.TransactionDate, new { @name = "transactionDate", @class = "form-control",
                   @id = "transactionDate", @onkeydown = "return false;", placeholder = "Select Transaction Date",
                   @required = "required"
               })
                    @Html.ValidationMessageFor(model => model.TransactionDate, "", new { @class = "text-danger" })
                </div>
            </div>        
            <div class="form-group">
                @Html.LabelFor(model => model.Amount, htmlAttributes: new { @class = "control-label col-md-2 required-field " })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control" ,
                   @id = "Amount",@onfocusout = "ValidateAmount(this.value)",@required = "required",
                   @onkeypress = "return /[^a-z]/i.test(event.key)"
               } })
                    @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2 required-field" })
                <div class="col-md-10">
                    @Html.DropDownList("Description", null, htmlAttributes: new { @class = "form-control", @required = "required" })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-default" />
                </div>
            </div>
        </div>
    }

<div>
    @Html.ActionLink("Back to Account", "Details", "BankAccounts", new { id = Model.Code }, null)
</div>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" type="text/javascript"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8/jquery-ui.min.js" type="text/javascript"></script>
    <link href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/base/jquery-ui.css" rel="Stylesheet" type="text/css" />
    <script>

        $('#transactionDate').datepicker({
            dateFormat: "dd-M-yy",
             maxDate: 0
        });

        function ValidateAmount(NumberToValidate) {

            var valid = /^[0-9]{1,9}(?:\,[0-9]{1,2})?$/.test(NumberToValidate);
            {
                if (!valid || NumberToValidate < 0.01) {
                    alert("Invalid Amount. Please enter amount in the format 0,00 and greater than 0");
                    $("#Amount").val("");
                }

                return false;
            }
        }
    </script>
</body>
</html>


