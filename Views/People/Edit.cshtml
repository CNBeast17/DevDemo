@model SkillsAssessment.ViewModels.PersonVM

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_TraqLayout.cshtml";
}

<html>
<body>
    @Html.Partial("~/Views/Shared/_UIMessagePartial.cshtml", Model)
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h2 align="center" style="color:white;background-color:grey;">Edit @Model.Person.Name @Model.Person.Surname</h2>
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Person.Code, new { htmlAttributes = new { @id = "Code" } })
            @Html.HiddenFor(model => model.Person.IsActive)

            <div class="form-group">
                @Html.LabelFor(model => model.Person.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Person.Name, new { htmlAttributes = new { @class = "form-control", @onkeypress = "return /[^0-9]/i.test(event.key)", @MinLength = 2, @MaxLength = 50 } })
                    @Html.ValidationMessageFor(model => model.Person.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Person.Surname, htmlAttributes: new { @class = "control-label col-md-2 required-field" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Person.Surname, new
                    {
                        htmlAttributes = new
                        {
                            @class = "form-control",
                            @onkeypress = "return /[^0-9]/i.test(event.key)"
                   ,
                            @MinLength = 2,
                            @MaxLength = 50,
                            @required = "required"
                        }
                    })
                    @Html.ValidationMessageFor(model => model.Person.Surname, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Person.IDNumber, htmlAttributes: new { @class = "control-label col-md-2 required-field" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Person.IDNumber, new
                    {
                        htmlAttributes = new
                        {
                            @class = "form-control",
                            @MinLength = 13,
                            @MaxLength = 13
                   ,
                            @onfocusout = "CheckDuplicateID(this.value)",
                            @Id = "IdNum",
                            @required = "required"
               }
                    })
                    @Html.ValidationMessageFor(model => model.Person.IDNumber, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-default" />
                </div>
            </div>
        </div>
    }

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" type="text/javascript"></script>
    <script>
        function CheckDuplicateID(IdNum) {
            var personCode = document.getElementById('Code').value;
            $.get("/People/CheckDuplicateIdNumber?IdNum=" + escape(IdNum) + "&personCode=" + personCode,

                function (result) {
                    if (result != "Error") {
                        try {

                            if (result.length = 0) {

                            }
                            else {
                                alert("ID Number exists");

                                $("#IdNum").val("");
                            }
                        }
                        catch (cat) {

                        }
                    }
                    else
                        alert("Unsuccessfully captured!");
                });
        }
    </script>
</body>

</html>





